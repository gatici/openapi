// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigModels

import (
	"encoding/json"
	"fmt"
)

// PreemptVuln the model 'PreemptVuln'
type PreemptVuln string

// List of PreemptVuln
const (
	PREEMPTVULN_NOT_PREEMPTABLE PreemptVuln = "NOT_PREEMPTABLE"
	PREEMPTVULN_PREEMPTABLE     PreemptVuln = "PREEMPTABLE"
)

// All allowed values of PreemptVuln enum
var AllowedPreemptVulnEnumValues = []PreemptVuln{
	"NOT_PREEMPTABLE",
	"PREEMPTABLE",
}

func (v *PreemptVuln) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PreemptVuln(value)
	for _, existing := range AllowedPreemptVulnEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PreemptVuln", value)
}

// NewPreemptVulnFromValue returns a pointer to a valid PreemptVuln
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPreemptVulnFromValue(v string) (*PreemptVuln, error) {
	ev := PreemptVuln(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PreemptVuln: valid values are %v", v, AllowedPreemptVulnEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PreemptVuln) IsValid() bool {
	for _, existing := range AllowedPreemptVulnEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PreemptVuln value
func (v PreemptVuln) Ptr() *PreemptVuln {
	return &v
}

type NullablePreemptVuln struct {
	value *PreemptVuln
	isSet bool
}

func (v NullablePreemptVuln) Get() *PreemptVuln {
	return v.value
}

func (v *NullablePreemptVuln) Set(val *PreemptVuln) {
	v.value = val
	v.isSet = true
}

func (v NullablePreemptVuln) IsSet() bool {
	return v.isSet
}

func (v *NullablePreemptVuln) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreemptVuln(val *PreemptVuln) *NullablePreemptVuln {
	return &NullablePreemptVuln{value: val, isSet: true}
}

func (v NullablePreemptVuln) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreemptVuln) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
